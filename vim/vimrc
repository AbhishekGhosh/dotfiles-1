"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""         vimrc Configuration
"""
"""     Author: Stanley Chan
"""     Github: https://github.com/Happy-Dude
"""     Version: 09 July 2012
"""
""" Based on configurations from:
"""	amix the lucky stiff:	http://amix.dk/blog/post/19486#The-ultimate-vim-configuration-vimrc
"""	Jan C. Ebersbach:	http://github.com/jceb/vimrc
"""	phuzz:			http://phuzz.org/vimrc.html
"""	Robert Melton:		http://vi-improved.org/vimrc.php
"""	Uwe Hermann:		http://www.hermann-uwe.de/files/vimrc
"""	Padraig Brady:		http://www.pixelbeat.org/settings/.vimrc
"""	cliffsjunk:		http://mysettopbox.tv/phpBB2/viewtopic.php?t=18986
"""	Jeremy Edberg:		http://www.jedberg.net/jedberg_vimrc
"""	gaving:			https://github.com/gaving/dotfiles/blob/master/.vimrc
"""	askedrelic:		https://github.com/askedrelic/homedir/blob/master/.vimrc
"""	Janus:			https://github.com/carlhuda/janus
"""	Seth Brown:		http://www.drbunsen.org/text-triumvirate.html
"""	Wincent Colaiuta:	https://wincent.com/blog/tweaking-command-t-and-vim-for-use-in-the-terminal-and-tmux
"""	Steve Losh:		http://stevelosh.com/blog/2010/09/coming-home-to-vim/
"""	Jeff Kreeftmeijer:	http://jeffkreeftmeijer.com/2012/relative-line-numbers-in-vim-for-super-fast-movement/
"""
"""
"""	StackOverflow:		http://stackoverflow.com/questions/164847/what-is-in-your-vimrc
"""	Hacker News:		http://news.ycombinator.com/item?id=856051
"""	Reddit:			http://www.reddit.com/r/linux/comments/9zq8h/vim_users_what_are_some_interesting_hacks_or/
"""
"""
""" Plugin Homepages:
"""	pathogen:		https://github.com/tpope/vim-pathogen
"""	fugitive:		https://github.com/tpope/vim-fugitive
"""	surround:		https://github.com/tpope/vim-surround
"""	syntastic:		https://github.com/scrooloose/syntastic
"""	python-mode:		https://github.com/klen/python-mode
"""	easymotion:		https://github.com/Lokaltog/vim-easymotion
"""	nerdtree:		https://github.com/scrooloose/nerdtree
"""	ctrlp:			https://github.com/kien/ctrlp.vim
"""	nerdcommenter:		https://github.com/scrooloose/nerdcommenter
"""	gundo:			https://github.com/sjl/gundo.vim
"""	ack:			https://github.com/mileszs/ack.vim
"""	clam:			https://github.com/sjl/clam.vim
"""	tslime:			https://github.com/kikijump/tslime.vim
"""	slimv:			https://bitbucket.org/kovisoft/slimv/ & https://github.com/vim-scripts/slimv.vim
"""	vim-markdown		https://github.com/tpope/vim-markdown
"""	vim-latex:		http://vim-latex.sourceforge.net/
"""	cocoa			https://github.com/jgoulah/cocoa.vim
"""	html5:			https://github.com/othree/html5.vim
"""	matchtag:		https://github.com/gregsexton/MatchTag
"""	indent-guides:		https://github.com/nathanaelkane/vim-indent-guides
"""	unbundle:		https://github.com/sunaku/vim-unbundle
"""	solarized:		https://github.com/altercation/vim-colors-solarized
"""	tomorrow:		https://github.com/chriskempson/vim-tomorrow-theme
"""	jellybeans:		https://github.com/nanotech/jellybeans.vim
"""	Lucius:			http://www.vim.org/scripts/script.php?script_id=2536
"""
""" Interesting (unused) plugins:
"""	vundle:			https://github.com/gmarik/vundle
"""	vim-addon-manager:	https://github.com/MarcWeber/vim-addon-manager
"""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible        "Use VIM defaults
set modelines=0         "Set modelines to 0 to prevent several security exploits

""""""""""""""""""""""""""""""
"""" Plugin Configuration """"
""""""""""""""""""""""""""""""
filetype off            "Turn filetype plugin off until Pathogen loads

"pathogen settings
runtime bundle/pathogen-tpope/autoload/pathogen.vim     "Unconventional path to plugin (inside submodule)
call pathogen#infect()      "pathogen: Activate plugin
call pathogen#helptags()
"runtime bundle/unbundle-sunaku/unbundle.vim            "unbundle: Alternative plugin manager

filetype plugin indent on   "Enable filetype plugin and filetype-based indentation
syntax on                   "Enable syntax highlighting
syntax enable

" indent-guides settings
let g:indent_guides_guide_size = 1              " Instead of having the indent guide be the size of a tabwidth, size it to just 1 character
let g:indent_guides_start_level = 2             " Start indent guides at 2nd-level of indents (we don't really need it in the first level)

"vim-latex settings
let g:tex_flavor='latex'    "Default .tex filetype to 'tex' instead of 'plaintex'
set shellslash              "Windows feature: forward slash when expanding filenames

"vim-slimv settings
let g:slimv_repl_syntax = 1 "Enable syntax highlighting in Slimv REPL buffer
"let g:slimv_swank_cmd = '! xterm -e sbcl --load ~/.vim/bundle/slimv-kovisoft/slime/start-swank.lisp &'

" syntastic settings
let g:syntastic_mode_map = { 'mode': 'active' }     "syntastic: Active syntax checking
function! SyntasC ()                                "syntastic: C
    let g:syntastic_c_check_header = 1
    let g:syntastic_c_no_include_search = 1
    let g:syntastic_c_auto_refresh_includes = 1
    let g:syntastic_cpp_compiler = 'gcc'
    let g:syntastic_c_compiler_options = ' -Wall -Wextra -pedantic -g -ggdb -std=c99'
    "let g:syntastic_c_compiler = 'clang'
    "let g:syntastic_c_compiler_options = ' -Weverything -g -std=c99'
endfunction

function! SyntasCPP ()                              "syntastic: C++
    let g:syntastic_cpp_check_header = 1
    let g:syntastic_cpp_no_include_search = 1
    let g:syntastic_cpp_auto_refresh_includes = 1
    let g:syntastic_cpp_compiler = 'g++'
    let g:syntastic_cpp_compiler_options = ' -Wall -Wextra -pedantic -g -ggdb -std=c++0x'
    "let g:syntastic_cpp_compiler = 'clang++'
    "let g:syntastic_cpp_compiler_options = ' -Weverything -g -std=c++0x'
endfunction

"syntastic: Perl
let g:syntastic_perl_lib_path = './lib'

autocmd BufRead,BufNewFile *.c call SyntasC()
autocmd BufRead,BufNewFile *.cpp call SyntasCPP()

" Solarized colorscheme settings
if !has("gui_running")                          " Use these settings if terminal vim; otherwise, gvimrc settings should take over
    let g:solarized_termcolors = 256            " Enable 256 color support and don't rely on terminal settings
    let g:solarized_termtrans = 0               " 1: Tell Solarized to use the default transparant terminal background; 0: Background handled by VIM
    let g:solarized_visibility = "normal"       " Set list characters can be set to one of three levels depending on your needs.
    let g:solarized_contrast = "normal"         " high/ low: Shifts some values up or down in order to expand or compress the tonal range displayed.
    "g:solarized_bold | g:solarized_underline | g:solarized_italic  " Set to 0 to turn of stylized typefaces
endif

""""""""""""""""""""""""""""""
"" End Plugin Configuration ""
""""""""""""""""""""""""""""""

set ttyscroll=0         "Number of lines to scroll; 0 for terminals where scrolling is slow and redrawing is fast
set ttyfast             "Fast terminal connection; more chars will be sent to screen for redrawing

set encoding=utf-8      "Default to UTF-8 encoding
set termencoding=utf-8
set fileencoding=utf-8
set fileformats=unix,dos,mac
"Default filetypes

"set cindent             "No need to set cindent since it is automatic for C-based files
"set smartindent         "Smartindent: auto inserts one extra level of indentation for C-like files.
set autoindent          "Autoindent: auto indents a new line to the same indentation used by previous line
set nowrap              "Do not wrap lines
"set tw=500             "Word wrapping text width
set linespace=0         "Don't insert any extra pixel lines between rows
set linebreak

set expandtab           "Default tabs into spaces
set shiftwidth=4        "Auto-indent amount when using cindent, >>, << and stuff like that
set softtabstop=4       "When hitting a tab or backspace- spaces should a tab should be
set tabstop=8           "VIM's default tabstop is 8
set smarttab            "A <Tab> in front of a line inserts blanks according to settings; <BS> deletes a shiftwidth

set ignorecase          "Ignore case when searching
set smartcase           "If there are caps, go case-sensitive
set infercase           "Case inferred by default
set hlsearch            "Highlight search things
set incsearch           "Make search act like search in modern browsers

set showmatch           "Show matching brackets
set matchtime=5         "How many tenths of a second to show matching paren with showmatch set
set magic               "Set magic on, for regular expressions
set grepprg=/bin/grep\ -nH  "VIM grep

set esckeys             "Function keys that start with <Esc> are recognized in insert mode
set list                "List mode: show special characters -- what is displayed is changed by listchars
set listchars=tab:>-,trail:-    ",eol:Â¬ or eol:$
"Display tabs to know we put them where we want them

set clipboard+=unnamed  "Share Window's clipboard
set formatoptions=rw    "Automatically insert command leader on return and let gq format comments
set shiftround          "When at 3 spaces and hit > ... go to 4, not 5

if (&t_Co == 256 || &t_Co == 88) && (!has("gui_running")) && ((&term =~ "xterm") || (&term =~ "screen") || (&term =~ "color"))
    " Colorscheme preferences:
    " solarized, Tomorrow-Night, jellybeans, lucius, tango2, desert, torte, murphy
    if filereadable(expand("$HOME/.vim/bundle/solarized-altercation/colors/solarized.vim"))
        set background=dark
        colorscheme solarized
    elseif filereadable(expand("$HOME/.vim/bundle/jellybeans-nanotech/colors/jellybeans.vim"))
        set background=dark
        colorscheme jellybeans
    elseif filereadable(expand("$HOME/.vim/bundle/tomorrow-chriskempson/colors/Tomorrow-Night.vim"))
        set background=light
        colorscheme Tomorrow-Night
    endif
endif

set cursorline          "Highlight the current line
set cursorcolumn        "Highlight the current column
""" Highlight column 81 for old-school 80 character terminal widths
""" The elseif hack is from http://stackoverflow.com/a/235970
if exists('+colorcolumn')
    set colorcolumn=81
else
    highlight ColorColumn ctermbg=235
    match ColorColumn /\%81v/
endif

set laststatus=2        "Always show the statusline
set statusline=[%n]\ %F%m%r%h%w\ %#warningmsg#%{SyntasticStatuslineFlag()}%*\ %=%{&ff}\ \|\ %{&enc}\ \|\ %Y\ %<[utf8_0x%02.B/ascii_%03.3b]\ [LN\ %03l:%02v/%L][%p%%]
"                |    | | | | |   |                                            |   |           |          |   |           |            |           |    |  |   +-- Current position in file
"                |    | | | | |   |                                            |   |           |          |   |           |            |           |    |  +-- Total number of lines
"                |    | | | | |   |                                            |   |           |          |   |           |            |           |    +-- Column
"                |    | | | | |   |                                            |   |           |          |   |           |            |           +-- Current line (row)
"                |    | | | | |   |                                            |   |           |          |   |           |            +-- ASCII value
"                |    | | | | |   |                                            |   |           |          |   |           +-- HEX value
"                |    | | | | |   |                                            |   |           |          |   +-- Truncate statusline from here
"                |    | | | | |   |                                            |   |           |          +-- Filetype as VIM recognized
"                |    | | | | |   |                                            |   |           +-- File encoding
"                |    | | | | |   |                                            |   +-- Current fileformat
"                |    | | | | |   |                                            +-- Right justify from here
"                |    | | | | |   +-- syntastic plugin
"                |    | | | | +-- preview flag in square brackets
"                |    | | | +-- help flag in square brackets
"                |    | | +-- readonly flag in square brackets
"                |    | +-- modified flag in square brackets
"                |    +-- %F: full path to file in the buffer; %f: file in the buffer (in the buffer title bar -- unnecessary)
"                +-- %n: buffer number

set wildmenu            "Turn on wild menu
set wildignore=*.dll,*.o,*.obj,*.bak,*.exe,*.pyc,*.jpg,*.gif,*.png
"Ignore these list file extensions
set wildmode=list:longest,full
"Turn on wild mode huge list
set wildchar=<TAB>
"Path/file expansion in colon mode

"set title "Show title in console title bar
set guioptions=em       "e ensures tab bar is displayed in GUI; m ensures menu bar is displayed
set showcmd             "Display commands as they are typed
set cmdheight=1         "Set the commandbar height
set showtabline=2       "Display tab line even if single file opened
set guitablabel=%t      "Display buffer name on tab label
"set nohidden           "When I close a tab, remove from buffer
set tm=500              "Set tooltip menu

""" relativenumber is a VIM 7.3 option
""" If the option doesn't exist, fall back to just absolute line numbers
if exists('+relativenumber') && (version >= 704) || (version == 703) && has("patch1115")
    set relativenumber  "Display how far away each line is from the current one by default
    set number          "When used with relativenumber, the absolute line of the current

elseif exists('+relativenumber')
    set relativenumber  "Display how far away each line is from the current one by default

    ""Switch to absolute line numbers whenever Vim loses focus
    autocmd FocusLost * :set number
    autocmd FocusGained * :set relativenumber

    ""Use absolute line numbers when in insert mode and relative numbers when in normal mode
    autocmd InsertEnter * :set norelativenumber | set number
    autocmd InsertLeave * :set relativenumber

else
    set number          "Show absolute line numbers

endif

set ruler               "Show cursor position all times
set numberwidth=5       "Aesthetic uses only... and for displaying large line numbers
set more                "Use more propmt -- pausing screen when too many items are displayed
set noautowrite         "Don't automagically write on :next
set hid                 "Change buffer - without saving

set nolazyredraw        "Don't redraw while executing macros

set backspace=indent,eol,start
"Set backspace config -- same as set bs=2
set whichwrap=b,s,h,l,<,>,[,]
"Move freely between file

set report=0            "Tell us when anything is changed via :...

"set undofile            "Have VIM save undo history to file and restore it on open
set history=350         "Sets how many lines of history VIM will remember
set undolevels=500      "Number of undo levels

"set scrolloff=0        "Set 'x' lines to the cursors position - when moving verticle
"set sidescrolloff=0    "Keep at least 'x' lines left/right

" Folding
set foldenable          "Turn on folding
set foldmarker={,}      "Fold C-style code (only user this as default if you use a high foldlevel
set foldmethod=marker   "Fold on the marker
set foldlevel=100       "Don't autofold anything (but Ican still fold manually)
set foldopen=block,hor,mark,percent,quickfix,tag
"What movement open folds

set noerrorbells
set novisualbell
set vb t_vb=            "When no beep or flash is wanted
"No sound on errors

set cpoptions=aABceFsmq
"             |||||||||
"             ||||||||+-- When joining lines, leave the cursor
"             |||||||      between joined lines
"             |||||||+-- When a new match is created (showmatch)
"             ||||||      pause for .5
"             ||||||+-- Set buffer options when entering the
"             |||||      buffer
"             |||||+-- :write command updates current file name
"             ||||+-- Automatically add <CR> to the last line
"             |||      when using :@r
"             |||+-- Searching continues at the end of the match
"             ||      at the cursor position
"             ||+-- A backslash has no special meaning in mappings
"             |+-- :write updates alternative file name
"             +-- :read updates alternative file name

" Map Ctrl-Backspace to delete previous word in insert mode like Ctrl-w
" Note how this mapping does not work in terminal vim because of term-keys
" However, this mapping will work just fine in gvim
inoremap <C-BS> <C-w>

" To move up and down logical lines instead of physical lines
" Instead of changing the Home row keys, use the arrow keys
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk
noremap <silent> <Up> gk
noremap <silent> <Down> gj
inoremap <silent> <Up> <C-o>gk
inoremap <silent> <Down> <C-o>gj
" Home and end keys are broken -- dependent of TERM variable;
" Dunno how to fix reliably
noremap <silent> <Home> g<Home>
noremap <silent> <End> g<End>
inoremap <silent> <Home> <C-o>g<Home>
inoremap <silent> <End> <C-o>g<End>

" Smart way to move between windows
" Also noted how they don't seem to work... Need to investigate.
"noremap <C-j> <C-w>j
"noremap <C-k> <C-w>k
"noremap <C-h> <C-w>h
"noremap <C-l> <C-w>l

"From Harley's configuration on StackOverflow
"set backup
"set backupdir=~/.vim/backup
"set directory=~/.vim/tmp

set nobackup
set nowb
set noswapfile
"Turn backup off

" Use english for spellchecking, but don't spellcheck by default
if version >= 700
    set spl=en spell
    set nospell
endif

" Enable mouse support in console
if has('mouse')
    set mouse=a
    if &term =~ "xterm" || &term =~ "screen"
        " for some reason, doing this directly with 'set ttymouse=xterm2'
        " doesn't work -- 'set ttymouse?' returns xterm2 but the mouse
        " makes tmux enter copy mode instead of selecting or scrolling
        " inside Vim -- but luckily, setting it up from within autocmds
        " works
        autocmd VimEnter * set ttymouse=xterm2
        autocmd FocusGained * set ttymouse=xterm2
        autocmd BufEnter * set ttymouse=xterm2
    endif
endif
"
" Real men use gcc
"compiler gcc


if has("autocmd")
    " Restore cursor position
    au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

        " Filetypes (au = autocmd)
        au FileType helpfile set nonumber      " no line numbers when viewing help
        au FileType helpfile nnoremap <buffer><cr> <c-]>   " Enter selects subject
        au FileType helpfile nnoremap <buffer><bs> <c-T>   " Backspace to go back

        " When using mutt, text width=72
        au FileType mail,tex set textwidth=72
        au FileType cpp,c,java,sh,pl,php,asp  set autoindent
        au FileType cpp,c,java,sh,pl,php,asp  set smartindent
        au FileType cpp,c,java,sh,pl,php,asp  set cindent
        "au BufRead mutt*[0-9] set tw=72

        " Automatically chmod +x Shell and Perl scripts
        "au BufWritePost   *.sh             !chmod +x %
        "au BufWritePost   *.pl             !chmod +x %

        " File formats
        au BufNewFile,BufRead  *.pls    set syntax=dosini
        au BufNewFile,BufRead  modprobe.conf    set syntax=modconf


        "From Uwe Hermann's configuration
        " Drupal *.module and *.engine files.
        augroup module
            autocmd BufRead                 *.module,*.engine set filetype=php
        augroup END

        " Python code.
        augroup python
            autocmd BufReadPre,FileReadPre  *.py set tabstop=4
            autocmd BufReadPre,FileReadPre  *.py set expandtab
        augroup END

        " Ruby code.
        augroup ruby
            autocmd BufReadPre,FileReadPre  *.rb set tabstop=2
            autocmd BufReadPre,FileReadPre  *.rb set expandtab
        augroup END

        " PHP code.
        augroup php
            autocmd BufReadPre,FileReadPre  *.php set tabstop=4
            autocmd BufReadPre,FileReadPre  *.php set expandtab
        augroup END

        " Java code.
        augroup java
            autocmd BufReadPre,FileReadPre  *.java set tabstop=4
            autocmd BufReadPre,FileReadPre  *.java set expandtab
        augroup END

        " ANT build.xml files.
        augroup xml
            autocmd BufReadPre,FileReadPre  build.xml set tabstop=4
        augroup END

        " (J)Flex files.
        augroup lex
            " autocmd BufRead,BufNewFile    *.flex,*.jflex set filetype=lex
            autocmd BufRead,BufNewFile      *.flex,*.jflex set filetype=jflex
        augroup END

        " (Nu)SMV files.
        augroup smv
            autocmd BufRead,BufNewFile      *.smv set filetype=smv
        augroup END

    endif


    "From Frew's configuration on StackOverflow
    "{{{Frew's Auto Commands, Misc Commands, and Functions

    " Automatically cd into the directory that the file is in
    autocmd BufEnter * if expand('%:p') !~ '://' | execute "chdir ".escape(expand("%:p:h"), ' ') | endif

    " Remove any trailing whitespace that is in the file and indent entire file and return to position
    autocmd BufRead,BufWrite * :exe ":normal! ma" | silent! %s/\s\+$//ge | :exe ":normal! 'azz"
    autocmd BufWrite * if ! &bin && &filetype != "" && &filetype !~ '\(conf\|text\|markdown\|make\|perl\|python\|haskell\|sh\|asm\)' | :exe ":normal! gg=G" | :exe ":normal! 'azz" | endif

    " Restore cursor position to where it was before
    augroup JumpCursorOnEdit
        au!
        autocmd BufReadPost *
                    \ if expand("<afile>:p:h") !=? $TEMP |
                    \   if line("'\"") > 1 && line("'\"") <= line("$") |
                    \     let JumpCursorOnEdit_foo = line("'\"") |
                    \     let b:doopenfold = 1 |
                    \     if (foldlevel(JumpCursorOnEdit_foo) > foldlevel(JumpCursorOnEdit_foo - 1)) |
                    \        let JumpCursorOnEdit_foo = JumpCursorOnEdit_foo - 1 |
                    \        let b:doopenfold = 2 |
                    \     endif |
                    \     exe JumpCursorOnEdit_foo |
                    \   endif |
                    \ endif
        " Need to postpone using "zv" until after reading the modelines.
        autocmd BufWinEnter *
                    \ if exists("b:doopenfold") |
                    \   exe "normal zv" |
                    \   if(b:doopenfold > 1) |
                    \       exe  "+".1 |
                    \   endif |
                    \   unlet b:doopenfold |
                    \ endif
    augroup END

